name: Build Pantah kernel
on:
  workflow_dispatch:
  
jobs:
  build_kernel:
    runs-on: ubuntu-22.04
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          
      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="android14-6.1-lts"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

          echo "CONFIG set to: $CONFIG"

      - name: checkout scripts
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: install packages
        run: |
          ./pkginstall

      - name: Set up ccache
        run: |
          mkdir -p ~/.cache/bazel # Ensure the directory exists
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
          
      - name: init credentials
        run: |   
          cd ~      
          git config --global user.name "[kernel buildbot] vy"
          git config --global user.email "vy@buildbot.tvyiutnhisokewt"
      
      - name: checkout aosp kernel build system
        run: |
          cd ~        
          mkdir kernel
          cd kernel
          repo init -u https://github.com/EduardoA3677/android-gs-pantah-6.1-android15-qpr2 --depth 1
          repo sync -c -j6 --no-tags --no-clone-bundle --force-sync
          echo "CURRENT_DIR=$(pwd)" >> $GITHUB_ENV
          echo "La ruta actual es: $CURRENT_DIR"
   
      - name: checkout android14-6.1-lts
        run: |
          cd ~/kernel
          rm -rf aosp/
          git clone https://github.com/EduardoA3677/kernel_common -b android14-6.1 --depth=1 aosp
      
      - name: Restore ccache from cache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: android14-6.1-lts-ccache-${{ github.sha }}
          restore-keys: |
            android14-6.1-lts-ccache-
      
      - name: Cache toolchain
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/kernel/prebuilts/kernel-build-tools
            ~/kernel/tools/mkbootimg/
          key: toolchain-${{ runner.os }}-v1
            

      # KSU specific steps
      - name: clone wild kernel patches + susfs4ksu
        run: |
          cd ~
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1
          git clone https://github.com/WildPlusKernel/kernel_patches.git
          mv kernel_patches ~/kernel
          mv susfs4ksu ~/kernel

      - name: patch kernel ksunext susfs
        run: |
          cd ~
          cd kernel/aosp
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
          cd KernelSU-Next
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" 10200)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          cd ..
          rm android/abi_gki_protected_exports_*
          cd ~/kernel
          cp susfs4ksu/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch ./aosp/
          cp susfs4ksu/kernel_patches/fs/* ./aosp/fs/
          cp susfs4ksu/kernel_patches/include/linux/* ./aosp/include/linux/
          #cp kernel_patches/next/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch ./aosp/KernelSU-Next
          cp kernel_patches/next/syscall_hooks.patch ./aosp/
          cp kernel_patches/69_hide_stuff.patch ./aosp/
          cd ~/kernel/aosp
          cd ./KernelSU-Next
          #patch -p1 --forward < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || true
          cd ..
          patch -p1 < 50_add_susfs_in_gki-android14-6.1.patch
          patch -p1 -F 3 < 69_hide_stuff.patch
          patch -p1 -F 3 < syscall_hooks.patch
          
          cd ~/kernel
          echo "Adding configuration settings to gki_defconfig..."
          # Add KSU configuration settings
          echo "CONFIG_KSU=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_WITH_KPROBES=n" >> ./aosp/arch/arm64/configs/gki_defconfig
          # Add SUSFS configuration settings
          echo "CONFIG_KSU_SUSFS=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./aosp/arch/arm64/configs/gki_defconfig
          # Add additional tmpfs config setting
          echo "CONFIG_TMPFS_XATTR=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          # Add additional config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./aosp/arch/arm64/configs/gki_defconfig
          cd ~/kernel
          sed -i 's/check_defconfig//' ./aosp/build.config.gki
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          
      - name: Build Kernel
        run: |
            set -e
            set -x
            cd "$CURRENT_DIR"
            tools/bazel run \
              --disk_cache=/home/runner/.cache/bazel \
              --kernel_package=@//aosp \
              --config=local \
              --lto=none \
              --config=pantah \
              //private/devices/google/pantah:gs201_pantah_dist \
              --config=no_download_gki_fips140 \
              --config=no_download_gki \
              "${@}"
            ccache --show-stats

      - name: Pack AnyKernel3
        continue-on-error: true
        run: |
          cd ~/kernel
          git clone -b gs201 --recursive --depth=1 -j $(nproc) https://github.com/EduardoA3677/AnyKernel3.git AnyKernel3
          cp ~/kernel/out/pantah/dist/dtbo.img ~/kernel/AnyKernel3/dtbo.img
          cp ~/kernel/out/pantah/dist/vendor_kernel_boot.img ~/kernel/AnyKernel3/vendor_kernel_boot.img
          cp AnyKernel3 AnyKernel3-gz
          cp AnyKernel3 AnyKernel3-lz4
          cp ~/kernel/out/pantah/dist/Image.lz4 ~/kernel/AnyKernel3-lz4/Image.lz4
          cp ~/kernel/out/pantah/dist/Image.gz ~/kernel/AnyKernel3-gz/Image.gz
          cp ~/kernel/out/pantah/dist/Image ~/kernel/AnyKernel3/Image
    
      - name: Prepare timestamp
        run: |
          TIMESTAMP=$(date +'%Y-%m-%d_%H-%M')
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV

          echo "TIMESTAMP set to: $TIMESTAMP"
          
      - name: upload AnyKernel3 zip as artifact
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: android14-6.1-susfsnext-${TIMESTAMP}
          path: |
            ~/kernel/AnyKernel3

      - name: upload AnyKernel3 gz zip as artifact
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: android14-6.1-susfsnext-${TIMESTAMP}-gz
          path: |
            ~/kernel/AnyKernel3-gz
   
      - name: upload AnyKernel3 lz4 zip as artifact
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: android14-6.1-susfsnext-${TIMESTAMP}-lz4
          path: |
            ~/kernel/AnyKernel3-lz4
            
      - name: Pack build output for testing
        continue-on-error: true
        run: |
          cd ~/kernel/out
          mkdir -p output

          # Buscar y copiar los archivos deseados
          find . -type f \( \
            -name ".config" -o \
            -name "*.config" -o \
            -name "*defconfig" -o \
            -name "*.tar.gz" -o \
            -name "*.zip" -o \
            -name "*.img" -o \
            -name "*.gz" -o \
            -name "*.dtb" -o \
            -name "*.dtbo" -o \
            -name "*.lz4" -o \
            -name "*Image" -o \
            -name "*dtb" -o \
            -name "*dtbo" -o \
            -name "*gz" \
          \) -exec cp --parents {} output/ \;

          # Comprimir los resultados en un .zip
          cd output
          zip -r "../kernel_files.zip" ./*
          
      - name: Upload output to artifacts
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: android14-6.1-output-${TIMESTAMP}
          path: ~/kernel/out/output
          
      - name: Pack kernel build img output
        continue-on-error: true
        run: |
          cd ~/kernel/out/pantah/dist
          mkdir imgs
          cp *.img imgs

      - name: upload dist folder as artifact
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: android14-6.1-dist-${TIMESTAMP}
          path: ~/kernel/out/pantah/dist
          
      - name: upload images build folder as artifact
        continue-on-error: true
        uses: actions/upload-artifact@v4
        with:
          name: android14-6.1-imgs-${TIMESTAMP}
          path: ~/kernel/out/pantah/dist/imgs
          
